name: Build

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: linz/action-typescript@v3

      # Only build containers on branches otherwise container builds are duplicated deploy-nonprod-containers 
      - name: Set up Docker Buildx
        if: ${{ github.ref != 'refs/heads/master' }}
        uses: docker/setup-buildx-action@v3

      - name: Build container
        if: ${{ github.ref != 'refs/heads/master' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          build-args: |
            GIT_HASH=${{ github.sha }}
            GITHUB_RUN_ID=${{ github.run_id}}

  deploy-nonprod-containers:
    runs-on: ubuntu-latest

    concurrency: deploy-dev-${{ github.ref }}

    # On push to master when it is not a release!
    if: ${{ github.ref == 'refs/heads/master' && !startsWith(github.event.head_commit.message, 'release:') }}

    needs: ['build']

    permissions:
      id-token: write
      contents: read
      packages: write

    env:
      AWS_CI_ROLE: ${{ secrets.AWS_CI_ROLE }}

    environment:
      name: nonprod

    steps:
      - uses: linz/action-typescript@v3

      - name: Setup GIT version
        id: version
        run: |
          GIT_VERSION=$(git describe --tags --always --match 'v*')
          GIT_VERSION_MAJOR=$(echo $GIT_VERSION | cut -d. -f1)
          GIT_VERSION_MAJOR_MINOR=$(echo $GIT_VERSION | cut -d. -f1,2)

          echo "version=${GIT_VERSION}" >> $GITHUB_OUTPUT
          echo "version_major=${GIT_VERSION_MAJOR}" >> $GITHUB_OUTPUT
          echo "version_major_minor=${GIT_VERSION_MAJOR_MINOR}" >> $GITHUB_OUTPUT

      - name: Set up Docker Qemu
        id: qemu
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ github.repository }}
          labels: |
            org.opencontainers.image.version=${{ steps.version.outputs.version }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS Credentials
        if: ${{env.AWS_CI_ROLE != ''}}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-southeast-2
          mask-aws-account-id: true
          role-to-assume: ${{ secrets.AWS_CI_ROLE }}

      - name: Login to Amazon ECR
        if: ${{env.AWS_CI_ROLE != ''}}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup docker tags
        id: tags
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const tags = [];
            tags.push('ghcr.io/${{ github.repository }}:latest');
            tags.push('ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}');

            if ("${{ steps.login-ecr.outputs.registry }}") {
              tags.push('${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:latest');
              tags.push('${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:${{ steps.version.outputs.version }}');
            }
            return tags.join(', ')

      - name: Build and push container
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ steps.tags.outputs.result }}
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/arm64,linux/amd64
          build-args: |
            GIT_HASH=${{ github.sha }}
            GIT_VERSION=${{ steps.version.outputs.version }} 
            GITHUB_RUN_ID=${{ github.run_id}}
